{"version":3,"sources":["components/utility/index.tsx","components/TextInput/TextInput.tsx","components/Button/Button.tsx","firebase.ts","store/slices/authSlice.ts","containers/forms/SignUpForm/SignUpForm.tsx","customHooks/useAuthCleanUp.ts","pages/auth/SignUp/SignUp.tsx","components/Header/Header.tsx","components/Navigation/MobileNavMenu/MobileNavMenu.tsx","components/Navigation/NavItem/NavItem.tsx","components/Navigation/DesktopNavMenu/DesktopNavMenu.tsx","constants/routes.ts","containers/layout/NavigationContainer/NavigationContainer.tsx","components/Logo/logo.png","components/Logo/Logo.tsx","components/Humburger/Humburger.tsx","containers/layout/HeaderContainer/HeaderContainer.tsx","containers/layout/AppContainer/AppContainer.tsx","containers/forms/VerifyEmailForm/VerifyEmailForm.tsx","pages/auth/VerifyEmail/VerifyEmail.tsx","components/SimpleInput/SimpleInput.tsx","components/Modal/Modal.tsx","components/FormikSelect/FormikSelect.tsx","store/slices/contactsSlice.ts","containers/modals/AddContact/AddContact.tsx","containers/contacts/ContactsControls/ContactsControls.tsx","components/ContactCard/ContactCard.tsx","containers/modals/EditContact/EditContact.tsx","containers/modals/DeleteContact/DeleteContact.tsx","containers/contacts/ContactList/ContactList.tsx","pages/contacts/Contacts/Contacts.tsx","containers/modals/DeleteAccount/DeleteAccount.tsx","containers/forms/ProfileForm/ProfileForm.tsx","pages/auth/Profile/Profile.tsx","containers/forms/SignInForm/SignInForm.tsx","pages/auth/SignIn/SignIn.tsx","pages/auth/SignOut/SignOut.tsx","App.tsx","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["Container","children","className","FormContainer","title","error","success","errorClassName","successClassName","Backdrop","open","onClick","Loader","TextInput","props","useField","field","meta","touched","placeholder","type","Button","variant","stretch","disabled","round","onClickHandler","buttonClassName","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","authSlice","createSlice","name","initialState","loading","verificationSuccess","editProfileSuccess","deleteProfileError","reducers","cleanUp","state","authStart","authSuccess","authFailure","action","payload","deleteProfileFailure","actions","selectAuthState","auth","signUp","firstName","lastName","email","password","dispatch","a","createUserWithEmailAndPassword","res","user","currentUser","sendEmailVerification","collection","doc","uid","set","message","signIn","signInWithEmailAndPassword","editProfile","getState","userEmail","updateEmail","updatePassword","signUpSchema","Yup","shape","required","min","max","confirmPassword","oneOf","SignUpForm","useSelector","useDispatch","initialValues","onSubmit","values","setSubmitting","validationSchema","useAuthCleanUp","useEffect","SignUp","Header","MobileNavMenu","mobileMenuClassName","isMobileMenuOpen","NavItem","to","onNavItemClickHandler","activeClassName","exact","DesktopNavMenu","ROUTES","NavigationContainer","menuItems","emailVerified","Logo","height","src","logo","style","alt","Humburger","isOpen","humburgerClassName","HeaderContainer","useState","setIsMobileMenuOpen","currentState","AppContainer","VerifyEmailForm","VerifyEmail","SimpleInput","value","onChangeHandler","onChange","Modal","feedback","feedbackClassName","createPortal","document","getElementById","FormikSelect","contactsSlice","contactsCleanUp","contactsStart","contactsSuccess","contactsFailure","selectContactsState","contacts","createContact","newContactData","cb","newContact","id","uuidv4","userRef","get","exists","update","FieldValue","arrayUnion","editContact","contactData","snapShot","userContacts","data","userNewContacts","map","contact","contactSchema","phone","category","birthday","nullable","AddContact","toISOString","resetForm","setFieldValue","as","selected","dateFormat","date","placeholderText","showYearDropdown","showMonthDropdown","isClearable","ContactsControls","onNameFilterChangeHandler","modalOpen","setModalOpen","ContactCard","onEditButtonClickHandler","onDeleteButtonClickHandler","icon","faAddressCard","size","color","faUser","faPhone","faEnvelope","faSitemap","faBirthdayCake","Date","toDateString","faEdit","faTrashAlt","EditContact","DeleteContact","onCancelButtonClickHandler","ContactList","content","searchQuery","contactToEdit","setContactToEdit","contactToDelete","setContactToDelete","requesting","status","requested","useFirestoreConnect","length","visibleContacts","useMemo","filter","toLocaleLowerCase","includes","sort","contA","contB","contAFullName","contBFullName","localeCompare","Boolean","arrayRemove","Contacts","nameFilter","setNameFilter","setSearchQuery","setSearchQueryWithDebounce","useCallback","debounce","target","DeleteAccount","delete","profileSchema","ProfileForm","profile","isLoaded","Profile","signInSchema","SignInForm","SignIn","SignOut","signOut","console","App","routes","path","component","rootReducer","combineReducers","authReducer","firebaseReducer","firestoreReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","Object","keys","rfConstants","actionTypes","actionsPrefix","rrfActionTypes","ignoredPaths","thunk","extraArgument","getFirebase","getFirestore","store","configureStore","reducer","rrfProps","config","userProfile","useFirestoreForProfile","attachAuthIsReady","createFirestoreInstance","render"],"mappings":"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","file":"static/js/main.d1e89c84.chunk.js","sourcesContent":["import { FC } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport const Container: FC = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\ninterface FormContainerProps {\r\n  title: string;\r\n  error?: string;\r\n  success?: string;\r\n}\r\nexport const FormContainer: FC<FormContainerProps> = ({ title, error, success, children }) => {\r\n  const errorClassName = error\r\n    ? 'form-container-feedback form-container-feedback--error form-container-feedback--show'\r\n    : '.form-container-feedback';\r\n  const successClassName = success\r\n    ? 'form-container-feedback form-container-feedback--success form-container-feedback--show'\r\n    : '.form-container-feedback';\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <h1 className=\"form-title\">{title}</h1>\r\n      {children}\r\n      <div className=\"form-container-feedback-wrapper\">\r\n        <p className={errorClassName}>{error}</p>\r\n        <p className={successClassName}>{success}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface BackdropProps {\r\n  open: boolean;\r\n  onClick: () => void;\r\n}\r\nexport const Backdrop = ({ open, onClick }: BackdropProps) => {\r\n  return <div className={open ? 'backdrop backdrop--show' : 'backdrop'} onClick={onClick} />;\r\n};\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <div className=\"lds-spinner\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n","import { useField, FieldHookConfig } from 'formik';\r\n\r\nimport './TextInput.css';\r\n\r\nexport const TextInput = (props: FieldHookConfig<string>) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input>. We can use field meta to show an error\r\n  // message if the field is invalid and it has been touched (i.e. visited)\r\n  const [field, meta] = useField(props);\r\n\r\n  const errorClassName = meta.touched && meta.error ? 'text-input-error text-input-error--show' : 'text-input-error';\r\n\r\n  return (\r\n    <div className=\"text-input-wrapper\">\r\n      <input className=\"text-input\" {...field} placeholder={props.placeholder} type={props.type} />\r\n      <div className={errorClassName}>{meta.error}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport './Button.css';\r\n\r\ntype ButtonType = 'button' | 'submit';\r\n\r\ntype ButtonVariant = 'primary' | 'secondary' | 'danger' | 'success' | 'warning';\r\n\r\ninterface ButtonProps {\r\n  type: ButtonType;\r\n  variant: ButtonVariant;\r\n  stretch?: boolean;\r\n  disabled?: boolean;\r\n  onClickHandler?: () => void;\r\n  round?: boolean;\r\n}\r\n\r\nexport const Button: FC<ButtonProps> = ({ type, variant, stretch, disabled, round, onClickHandler, children }) => {\r\n  const buttonClassName = `button ${variant} ${stretch ? 'stretch' : ''} ${round ? 'round' : ''}`;\r\n\r\n  return (\r\n    <button className={buttonClassName} type={type} disabled={disabled} onClick={onClickHandler}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nexport const fbConfig = {\r\n  apiKey: process.env.REACT_APP_APIKEY,\r\n  authDomain: 'my-contacts-27cc7.firebaseapp.com',\r\n  projectId: 'my-contacts-27cc7',\r\n  storageBucket: 'my-contacts-27cc7.appspot.com',\r\n  messagingSenderId: '323409419800',\r\n  appId: '1:323409419800:web:38fac735d9ed1388642d6d',\r\n};\r\n\r\nfirebase.initializeApp(fbConfig);\r\nfirebase.firestore();\r\n\r\nexport default firebase;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { AppThunk } from 'store/store';\r\nimport firebase from '../../firebase';\r\nimport { RootState } from 'store/rootReducer';\r\n\r\ninterface AuthState {\r\n  error: null | boolean | string;\r\n  loading: boolean;\r\n  verificationSuccess: null | boolean;\r\n  editProfileSuccess: null | boolean;\r\n  deleteProfileError: null | string;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  error: null,\r\n  loading: false,\r\n  verificationSuccess: null,\r\n  editProfileSuccess: null,\r\n  deleteProfileError: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    cleanUp(state) {\r\n      state.error = null;\r\n      state.loading = false;\r\n      state.verificationSuccess = null;\r\n      state.editProfileSuccess = null;\r\n      state.deleteProfileError = null;\r\n    },\r\n    authStart(state) {\r\n      state.loading = true;\r\n      state.error = null;\r\n      state.verificationSuccess = null;\r\n      state.editProfileSuccess = null;\r\n      state.deleteProfileError = null;\r\n    },\r\n    authSuccess(state) {\r\n      state.loading = false;\r\n    },\r\n    authFailure(state, action: PayloadAction<string>) {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    verificationSuccess(state) {\r\n      state.verificationSuccess = true;\r\n    },\r\n    editProfileSuccess(state) {\r\n      state.editProfileSuccess = true;\r\n    },\r\n    deleteProfileFailure(state, action: PayloadAction<string>) {\r\n      state.loading = false;\r\n      state.deleteProfileError = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  cleanUp,\r\n  authStart,\r\n  authSuccess,\r\n  authFailure,\r\n  verificationSuccess,\r\n  editProfileSuccess,\r\n  deleteProfileFailure,\r\n} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;\r\n\r\nexport const selectAuthState = ({ auth }: RootState) => auth;\r\n\r\ninterface SignUpInputData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n}\r\nexport const signUp = ({ firstName, lastName, email, password }: SignUpInputData): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(authStart());\r\n    const res = await firebase.auth().createUserWithEmailAndPassword(email, password);\r\n    const user = firebase.auth().currentUser;\r\n    await user?.sendEmailVerification();\r\n    await firebase.firestore().collection('users').doc(res?.user?.uid).set({\r\n      firstName,\r\n      lastName,\r\n    });\r\n    dispatch(authSuccess());\r\n  } catch (err) {\r\n    dispatch(authFailure(err.message));\r\n  }\r\n};\r\n\r\nexport const verifyEmail = (): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(authStart());\r\n    const user = firebase.auth().currentUser;\r\n    await user?.sendEmailVerification();\r\n    dispatch(authSuccess());\r\n    dispatch(verificationSuccess());\r\n  } catch (err) {\r\n    dispatch(authFailure(err.message));\r\n  }\r\n};\r\n\r\nexport const signOut = (): AppThunk => async () => {\r\n  try {\r\n    await firebase.auth().signOut();\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n};\r\n\r\ninterface SignInInputData {\r\n  email: string;\r\n  password: string;\r\n}\r\nexport const signIn = ({ email, password }: SignInInputData): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(authStart());\r\n    await firebase.auth().signInWithEmailAndPassword(email, password);\r\n    dispatch(authSuccess());\r\n  } catch (err) {\r\n    dispatch(authFailure(err.message));\r\n  }\r\n};\r\n\r\ninterface EditProfileInputData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n}\r\nexport const editProfile = ({ firstName, lastName, email, password }: EditProfileInputData): AppThunk => async (\r\n  dispatch,\r\n  getState,\r\n) => {\r\n  try {\r\n    dispatch(authStart());\r\n    const user = firebase.auth().currentUser;\r\n    const { email: userEmail, uid } = getState().firebase.auth;\r\n    if (email !== userEmail) {\r\n      await user?.updateEmail(email);\r\n    }\r\n    await firebase.firestore().collection('users').doc(uid).set({\r\n      firstName,\r\n      lastName,\r\n    });\r\n    if (password) {\r\n      await user?.updatePassword(password);\r\n    }\r\n    dispatch(authSuccess());\r\n    dispatch(editProfileSuccess());\r\n  } catch (err) {\r\n    dispatch(authFailure(err.message));\r\n  }\r\n};\r\n\r\nexport const deleteAccount = (): AppThunk => async (dispatch, getState) => {\r\n  try {\r\n    dispatch(authStart());\r\n    const user = firebase.auth().currentUser;\r\n    const { uid } = getState().firebase.auth;\r\n    firebase.firestore().collection('users').doc(uid).delete();\r\n    firebase.firestore().collection('contacts').doc(uid).delete();\r\n    await user?.delete();\r\n    dispatch(authSuccess());\r\n  } catch (err) {\r\n    dispatch(deleteProfileFailure(err.message));\r\n  }\r\n};\r\n","import { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { FormContainer } from 'components/utility';\r\nimport { TextInput } from 'components/TextInput/TextInput';\r\nimport { Button } from 'components/Button/Button';\r\n\r\nimport { selectAuthState, signUp } from 'store/slices/authSlice';\r\nimport './SignUpForm.css';\r\n\r\ninterface FormValues {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n\r\nconst signUpSchema = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .required('First name is required')\r\n    .min(2, 'First name is too short')\r\n    .max(25, 'First name is too long'),\r\n  lastName: Yup.string()\r\n    .required('Last name is required')\r\n    .min(2, 'Last name is too short')\r\n    .max(25, 'Last name is too long'),\r\n  email: Yup.string().email('Invalid e-mail').required('E-mail is required'),\r\n  password: Yup.string().required('Password is required').min(8, 'Password is too short'),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Password does not match')\r\n    .required('You need to confirm the password'),\r\n});\r\n\r\nexport const SignUpForm = () => {\r\n  const { loading, error } = useSelector(selectAuthState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues: FormValues = { firstName: '', lastName: '', email: '', password: '', confirmPassword: '' };\r\n\r\n  return (\r\n    <FormContainer title=\"Signup\" error={typeof error === 'string' ? error : ''}>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={async (values, actions) => {\r\n          await dispatch(signUp(values));\r\n          actions.setSubmitting(false);\r\n        }}\r\n        validationSchema={signUpSchema}\r\n      >\r\n        <Form>\r\n          <TextInput type=\"text\" name=\"firstName\" placeholder=\"First name *\" />\r\n          <TextInput type=\"text\" name=\"lastName\" placeholder=\"Last name *\" />\r\n          <TextInput type=\"email\" name=\"email\" placeholder=\"E-mail *\" />\r\n          <TextInput type=\"password\" name=\"password\" placeholder=\"Password *\" />\r\n          <TextInput type=\"password\" name=\"confirmPassword\" placeholder=\"Confirm password *\" />\r\n          <div className=\"signup-form-button-wrapper\">\r\n            <Button type=\"submit\" variant=\"primary\" stretch disabled={loading}>\r\n              {loading ? 'Signing Up...' : 'Sign Up'}\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </FormContainer>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { cleanUp } from 'store/slices/authSlice';\r\n\r\nexport const useAuthCleanUp = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(\r\n    () => () => {\r\n      dispatch(cleanUp());\r\n    },\r\n    [dispatch],\r\n  );\r\n};\r\n","import './SignUp.css';\r\n\r\nimport { SignUpForm } from 'containers/forms/SignUpForm/SignUpForm';\r\nimport { useAuthCleanUp } from 'customHooks/useAuthCleanUp';\r\n\r\nexport const SignUp = () => {\r\n  useAuthCleanUp();\r\n\r\n  return (\r\n    <div className=\"signup-wrapper\">\r\n      <SignUpForm />\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport './Header.css';\r\n\r\nexport const Header: FC = ({ children }) => {\r\n  return <header className=\"header\">{children}</header>;\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport './MobileNavMenu.css';\r\n\r\ninterface MobileNavMenuProps {\r\n  isMobileMenuOpen: boolean;\r\n}\r\n\r\nexport const MobileNavMenu: FC<MobileNavMenuProps> = ({ children, isMobileMenuOpen }) => {\r\n  const mobileMenuClassName = isMobileMenuOpen ? 'mobile-menu mobile-menu--open' : 'mobile-menu';\r\n\r\n  return <div className={mobileMenuClassName}>{children}</div>;\r\n};\r\n","import { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './NavItem.css';\r\n\r\ninterface NavItemProps {\r\n  to: string;\r\n  onNavItemClickHandler: () => void;\r\n}\r\n\r\nexport const NavItem: FC<NavItemProps> = ({ children, to, onNavItemClickHandler }) => {\r\n  return (\r\n    <NavLink to={to} className=\"nav-item\" activeClassName=\"active\" onClick={onNavItemClickHandler} exact>\r\n      {children}\r\n    </NavLink>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport './DesktopNavMenu.css';\r\n\r\nexport const DesktopNavMenu: FC = ({ children }) => {\r\n  return <div className=\"desktop-menu\">{children}</div>;\r\n};\r\n","export const ROUTES = {\r\n  SIGNUP: '/signup',\r\n  VERIFY_EMAIL: '/verify-email',\r\n  CONTACTS: '/',\r\n  PROFILE: '/profile',\r\n  SIGNIN: '/signin',\r\n  SIGNOUT: '/signout',\r\n};\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport { MobileNavMenu } from 'components/Navigation/MobileNavMenu/MobileNavMenu';\r\nimport { NavItem } from 'components/Navigation/NavItem/NavItem';\r\nimport { DesktopNavMenu } from 'components/Navigation/DesktopNavMenu/DesktopNavMenu';\r\n\r\nimport { RootState } from 'store/rootReducer';\r\nimport { ROUTES } from 'constants/routes';\r\n\r\ninterface NavigationContainerProps {\r\n  isMobileMenuOpen: boolean;\r\n  onNavItemClickHandler: () => void;\r\n}\r\n\r\nexport const NavigationContainer = ({ isMobileMenuOpen, onNavItemClickHandler }: NavigationContainerProps) => {\r\n  const {\r\n    auth: { uid, emailVerified },\r\n  } = useSelector(({ firebase }: RootState) => firebase);\r\n\r\n  let menuItems;\r\n\r\n  if (uid && !emailVerified) {\r\n    menuItems = (\r\n      <>\r\n        <NavItem to={ROUTES.PROFILE} onNavItemClickHandler={onNavItemClickHandler}>\r\n          Profile\r\n        </NavItem>\r\n        <NavItem to={ROUTES.SIGNOUT} onNavItemClickHandler={onNavItemClickHandler}>\r\n          Sign Out\r\n        </NavItem>\r\n      </>\r\n    );\r\n  } else if (uid && emailVerified) {\r\n    menuItems = (\r\n      <>\r\n        <NavItem to={ROUTES.CONTACTS} onNavItemClickHandler={onNavItemClickHandler}>\r\n          Contacts\r\n        </NavItem>\r\n        <NavItem to={ROUTES.PROFILE} onNavItemClickHandler={onNavItemClickHandler}>\r\n          Profile\r\n        </NavItem>\r\n        <NavItem to={ROUTES.SIGNOUT} onNavItemClickHandler={onNavItemClickHandler}>\r\n          Sign Out\r\n        </NavItem>\r\n      </>\r\n    );\r\n  } else {\r\n    menuItems = (\r\n      <>\r\n        <NavItem to={ROUTES.SIGNIN} onNavItemClickHandler={onNavItemClickHandler}>\r\n          Sign In\r\n        </NavItem>\r\n        <NavItem to={ROUTES.SIGNUP} onNavItemClickHandler={onNavItemClickHandler}>\r\n          Sign Up\r\n        </NavItem>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MobileNavMenu isMobileMenuOpen={isMobileMenuOpen}>{menuItems}</MobileNavMenu>\r\n      <DesktopNavMenu>{menuItems}</DesktopNavMenu>\r\n    </>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.b4e8e86e.png\";","import logo from './logo.png';\r\nimport './Logo.css';\r\n\r\ninterface LogoProps {\r\n  height: string;\r\n}\r\n\r\nexport const Logo = ({ height }: LogoProps) => {\r\n  return (\r\n    <div className=\"logo\">\r\n      <img src={logo} style={{ height }} alt=\"Logo.\" />\r\n      <span className=\"logo-text\">myContacts</span>\r\n    </div>\r\n  );\r\n};\r\n","import './Humburger.css';\r\n\r\ninterface HumburgerProps {\r\n  isOpen: boolean;\r\n  onClickHandler: () => void;\r\n}\r\n\r\nexport const Humburger = ({ isOpen, onClickHandler }: HumburgerProps) => {\r\n  const humburgerClassName = isOpen ? 'humburger humburger--open' : 'humburger';\r\n\r\n  return (\r\n    <div className={humburgerClassName} onClick={onClickHandler}>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { Header } from 'components/Header/Header';\r\nimport { Container } from 'components/utility';\r\nimport { NavigationContainer } from 'containers/layout/NavigationContainer/NavigationContainer';\r\nimport { Logo } from 'components/Logo/Logo';\r\nimport { Humburger } from 'components/Humburger/Humburger';\r\n\r\nimport './HeaderContainer.css';\r\n\r\nexport const HeaderContainer = () => {\r\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\r\n\r\n  return (\r\n    <Header>\r\n      <Container>\r\n        <div className=\"header-inner\">\r\n          <Logo height=\"4rem\" />\r\n          <NavigationContainer\r\n            isMobileMenuOpen={isMobileMenuOpen}\r\n            onNavItemClickHandler={() => setIsMobileMenuOpen(false)}\r\n          />\r\n          <Humburger\r\n            isOpen={isMobileMenuOpen}\r\n            onClickHandler={() => setIsMobileMenuOpen((currentState) => !currentState)}\r\n          />\r\n        </div>\r\n      </Container>\r\n    </Header>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n\r\nimport { HeaderContainer } from 'containers/layout/HeaderContainer/HeaderContainer';\r\nimport { Container } from 'components/utility';\r\n\r\nimport './AppContainer.css';\r\n\r\nexport const AppContainer: FC = ({ children }) => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <main className=\"main\">\r\n        <Container>{children}</Container>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n","import { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { FormContainer } from 'components/utility';\r\nimport { Button } from 'components/Button/Button';\r\n\r\nimport { selectAuthState, verifyEmail } from 'store/slices/authSlice';\r\nimport './VerifyEmailForm.css';\r\n\r\nexport const VerifyEmailForm = () => {\r\n  const { loading, error, verificationSuccess } = useSelector(selectAuthState);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <FormContainer\r\n      title=\"Verify e-mail\"\r\n      error={typeof error === 'string' ? error : ''}\r\n      success={verificationSuccess ? 'Message sent successfully' : ''}\r\n    >\r\n      <p className=\"verify-email-text\">\r\n        Verification email was successfully sent. After you've verified email, please sign in to get the most out of our\r\n        application.\r\n      </p>\r\n      <p className=\"verify-email-text\">\r\n        If you see no email please check your spam. Still have no email? Try resending verification email.\r\n      </p>\r\n\r\n      <div className=\"verify-email-button-wrapper\">\r\n        <Button\r\n          type=\"button\"\r\n          variant=\"primary\"\r\n          stretch\r\n          disabled={loading}\r\n          onClickHandler={() => dispatch(verifyEmail())}\r\n        >\r\n          {loading ? 'Sending e-mail...' : 'Re-send e-mail'}\r\n        </Button>\r\n      </div>\r\n    </FormContainer>\r\n  );\r\n};\r\n","import { VerifyEmailForm } from 'containers/forms/VerifyEmailForm/VerifyEmailForm';\r\n\r\nimport { useAuthCleanUp } from 'customHooks/useAuthCleanUp';\r\nimport './VerifyEmail.css';\r\n\r\nexport const VerifyEmail = () => {\r\n  useAuthCleanUp();\r\n\r\n  return (\r\n    <div className=\"verify-email-wrapper\">\r\n      <VerifyEmailForm />\r\n    </div>\r\n  );\r\n};\r\n","import { FormEvent } from 'react';\r\n\r\nimport './SimpleInput.css';\r\n\r\ninterface SimpleInputProps {\r\n  type: 'text' | 'email';\r\n  name: string;\r\n  placeholder?: string;\r\n  value: string;\r\n  onChangeHandler: (evt: FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const SimpleInput = ({ type, name, placeholder, value, onChangeHandler }: SimpleInputProps) => {\r\n  return (\r\n    <input\r\n      className=\"simple-input\"\r\n      type={type}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onChangeHandler}\r\n    />\r\n  );\r\n};\r\n","import { FC } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nimport './Modal.css';\r\n\r\ninterface ModalProps {\r\n  open: boolean;\r\n  title: string;\r\n  feedback?: string;\r\n}\r\n\r\nexport const Modal: FC<ModalProps> = ({ open, title, feedback, children }) => {\r\n  const feedbackClassName = feedback ? 'modal-feedback modal-feedback--show' : 'modal-feedback';\r\n\r\n  return createPortal(\r\n    <div className={`${open ? 'modal modal--open' : 'modal'}`}>\r\n      <h1 className=\"modal-title\">{title}</h1>\r\n      {children}\r\n      <div className=\"modal-feedback-wrapper\">\r\n        <p className={feedbackClassName}>{feedback}</p>\r\n      </div>\r\n    </div>,\r\n    document.getElementById('root-modal') as HTMLElement,\r\n  );\r\n};\r\n","import { useField, FieldHookConfig } from 'formik';\r\n\r\nimport './FormikSelect.css';\r\n\r\nexport const FormikSelect = (props: FieldHookConfig<string>) => {\r\n  const [field, meta] = useField(props);\r\n\r\n  const errorClassName =\r\n    meta.touched && meta.error ? 'formik-select-error formik-select-error--show' : 'formik-select-error';\r\n\r\n  return (\r\n    <div className=\"formik-select-wrapper\">\r\n      <select className=\"formik-select\" {...field} children={props.children} />\r\n      <div className={errorClassName}>{meta.error}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { AppThunk } from 'store/store';\r\nimport firebase from '../../firebase';\r\nimport { RootState } from 'store/rootReducer';\r\n\r\ninterface ContactsState {\r\n  error: null | boolean | string;\r\n  loading: boolean;\r\n}\r\n\r\nconst initialState: ContactsState = {\r\n  error: null,\r\n  loading: false,\r\n};\r\n\r\nconst contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    contactsCleanUp(state) {\r\n      state.error = null;\r\n      state.loading = false;\r\n    },\r\n    contactsStart(state) {\r\n      state.error = null;\r\n      state.loading = true;\r\n    },\r\n    contactsSuccess(state) {\r\n      state.loading = false;\r\n    },\r\n    contactsFailure(state, action: PayloadAction<string>) {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { contactsCleanUp, contactsStart, contactsSuccess, contactsFailure } = contactsSlice.actions;\r\n\r\nexport default contactsSlice.reducer;\r\n\r\nexport const selectContactsState = ({ contacts }: RootState) => contacts;\r\n\r\nexport interface Contact {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  category: string;\r\n  birthday: string;\r\n}\r\nexport const createContact = (newContactData: Contact, cb: () => void): AppThunk => async (dispatch, getState) => {\r\n  const { uid } = getState().firebase.auth;\r\n  const newContact = {\r\n    id: uuidv4(),\r\n    ...newContactData,\r\n  };\r\n  dispatch(contactsStart());\r\n\r\n  try {\r\n    const userRef = await firebase.firestore().collection('contacts').doc(uid);\r\n    const snapShot = await userRef.get();\r\n\r\n    if (!snapShot.exists) {\r\n      await userRef.set({ contacts: [newContact] });\r\n    } else {\r\n      await userRef.update({\r\n        contacts: firebase.firestore.FieldValue.arrayUnion(newContact),\r\n      });\r\n    }\r\n\r\n    cb();\r\n    dispatch(contactsSuccess());\r\n  } catch (err) {\r\n    dispatch(contactsFailure(err.message));\r\n  }\r\n};\r\n\r\nexport interface ContactWithId extends Contact {\r\n  id: string;\r\n}\r\nexport const editContact = (id: string, contactData: Contact, cb: () => void): AppThunk => async (\r\n  dispatch,\r\n  getState,\r\n) => {\r\n  const { uid } = getState().firebase.auth;\r\n  dispatch(contactsStart());\r\n\r\n  try {\r\n    const userRef = await firebase.firestore().collection('contacts').doc(uid);\r\n    const snapShot = await userRef.get();\r\n    const userContacts: ContactWithId[] = snapShot.data()?.contacts;\r\n\r\n    const userNewContacts = userContacts.map((contact) => {\r\n      if (contact.id === id) {\r\n        return { ...contact, ...contactData };\r\n      }\r\n      return contact;\r\n    });\r\n\r\n    await userRef.update({\r\n      contacts: userNewContacts,\r\n    });\r\n\r\n    cb();\r\n    dispatch(contactsSuccess());\r\n  } catch (err) {\r\n    dispatch(contactsFailure(err.message));\r\n  }\r\n};\r\n\r\nexport const deleteContact = (contact: ContactWithId, cb: () => void): AppThunk => async (dispatch, getState) => {\r\n  const { uid } = getState().firebase.auth;\r\n  dispatch(contactsStart());\r\n\r\n  try {\r\n    const userRef = await firebase.firestore().collection('contacts').doc(uid);\r\n\r\n    await userRef.update({\r\n      contacts: firebase.firestore.FieldValue.arrayRemove(contact),\r\n    });\r\n\r\n    cb();\r\n    dispatch(contactsSuccess());\r\n  } catch (err) {\r\n    dispatch(contactsFailure(err.message));\r\n  }\r\n};\r\n","import { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Backdrop } from 'components/utility';\r\nimport { Modal } from 'components/Modal/Modal';\r\nimport { TextInput } from 'components/TextInput/TextInput';\r\nimport { Button } from 'components/Button/Button';\r\nimport { FormikSelect } from 'components/FormikSelect/FormikSelect';\r\n\r\nimport { createContact, selectContactsState } from 'store/slices/contactsSlice';\r\nimport './AddContact.css';\r\n\r\ninterface FormValues {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  category: string;\r\n  birthday: Date | null;\r\n}\r\n\r\nconst contactSchema = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .required('First name is required')\r\n    .min(2, 'First name is too short')\r\n    .max(25, 'First name is too long'),\r\n  lastName: Yup.string().min(2, 'Last name is too short').max(25, 'Last name is too long'),\r\n  email: Yup.string().email('Invalid e-mail'),\r\n  phone: Yup.string().required('Phone is required').min(9, 'Phone is too short'),\r\n  category: Yup.string().oneOf(['friends', 'job', 'family', 'other'], 'Invalid category type'),\r\n  birthday: Yup.date().nullable(),\r\n});\r\n\r\ninterface AddContactProps {\r\n  open: boolean;\r\n  onClickHandler: () => void;\r\n}\r\n\r\nexport const AddContact = ({ open, onClickHandler }: AddContactProps) => {\r\n  const { loading, error } = useSelector(selectContactsState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues: FormValues = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    category: 'other',\r\n    birthday: null,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Backdrop open={open} onClick={onClickHandler} />\r\n      <Modal title=\"Add new contact\" open={open} feedback={typeof error === 'string' ? error : ''}>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={async (values, actions) => {\r\n            await dispatch(\r\n              createContact(\r\n                { ...values, birthday: values.birthday ? values.birthday.toISOString() : '' },\r\n                onClickHandler,\r\n              ),\r\n            );\r\n            actions.setSubmitting(false);\r\n            actions.resetForm();\r\n          }}\r\n          validationSchema={contactSchema}\r\n        >\r\n          {({ values, setFieldValue, resetForm }) => (\r\n            <Form>\r\n              <TextInput type=\"text\" name=\"firstName\" placeholder=\"First name *\" />\r\n              <TextInput type=\"text\" name=\"lastName\" placeholder=\"Last name\" />\r\n              <TextInput type=\"email\" name=\"email\" placeholder=\"E-mail\" />\r\n              <TextInput type=\"text\" name=\"phone\" placeholder=\"Phone *\" />\r\n              <FormikSelect name=\"category\" as=\"select\">\r\n                <option value=\"other\">Other</option>\r\n                <option value=\"family\">Family</option>\r\n                <option value=\"job\">Job</option>\r\n                <option value=\"friends\">Friends</option>\r\n              </FormikSelect>\r\n              <div>\r\n                <DatePicker\r\n                  selected={values.birthday}\r\n                  dateFormat=\"MMMM d, yyyy\"\r\n                  className=\"add-contact-birthday\"\r\n                  name=\"birthday\"\r\n                  onChange={(date) => setFieldValue('birthday', date)}\r\n                  placeholderText=\"Birthday\"\r\n                  showYearDropdown\r\n                  showMonthDropdown\r\n                  isClearable\r\n                />\r\n              </div>\r\n              <div className=\"add-contact-buttons-wrapper\">\r\n                <div className=\"add-contact-create-button-wrapper\">\r\n                  <Button type=\"submit\" variant=\"primary\" stretch disabled={loading}>\r\n                    Create\r\n                  </Button>\r\n                </div>\r\n                <div className=\"add-contact-cancel-button-wrapper\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"secondary\"\r\n                    stretch\r\n                    onClickHandler={() => {\r\n                      onClickHandler();\r\n                      resetForm();\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { FormEvent, useState } from 'react';\r\n\r\nimport { SimpleInput } from 'components/SimpleInput/SimpleInput';\r\nimport { Button } from 'components/Button/Button';\r\nimport { AddContact } from 'containers/modals/AddContact/AddContact';\r\n\r\nimport './ContactsControls.css';\r\n\r\ninterface ContactsControlsProps {\r\n  value: string;\r\n  onNameFilterChangeHandler: (evt: FormEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const ContactsControls = ({ value, onNameFilterChangeHandler }: ContactsControlsProps) => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"contacts-controls\">\r\n        <div className=\"contacts-controls-input-wrapper\">\r\n          <SimpleInput\r\n            type=\"text\"\r\n            name=\"search\"\r\n            placeholder=\"Search...\"\r\n            value={value}\r\n            onChangeHandler={onNameFilterChangeHandler}\r\n          />\r\n        </div>\r\n        <Button type=\"button\" variant=\"success\" round onClickHandler={() => setModalOpen(true)}>\r\n          +\r\n        </Button>\r\n      </div>\r\n\r\n      <AddContact open={modalOpen} onClickHandler={() => setModalOpen(false)} />\r\n    </>\r\n  );\r\n};\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faAddressCard,\r\n  faUser,\r\n  faPhone,\r\n  faEnvelope,\r\n  faSitemap,\r\n  faBirthdayCake,\r\n  faEdit,\r\n  faTrashAlt,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { Button } from 'components/Button/Button';\r\n\r\nimport './ContactCard.css';\r\n\r\ninterface ContactCardProps {\r\n  firstName: string;\r\n  lastName?: string;\r\n  email?: string;\r\n  phone: string;\r\n  category: string;\r\n  birthday?: string;\r\n  onEditButtonClickHandler: () => void;\r\n  onDeleteButtonClickHandler: () => void;\r\n}\r\n\r\nexport const ContactCard = ({\r\n  firstName,\r\n  lastName,\r\n  email,\r\n  phone,\r\n  category,\r\n  birthday,\r\n  onEditButtonClickHandler,\r\n  onDeleteButtonClickHandler,\r\n}: ContactCardProps) => {\r\n  return (\r\n    <div className=\"contact-card\">\r\n      <div className=\"contact-card-left\">\r\n        <FontAwesomeIcon icon={faAddressCard} size=\"5x\" color=\"darkblue\" />\r\n      </div>\r\n\r\n      <div className=\"contact-card-center\">\r\n        <div className=\"contact-card-data-item contact-card-fullName\">\r\n          <div className=\"contact-card-icon-wrapper\">\r\n            <FontAwesomeIcon icon={faUser} color=\"darkblue\" />\r\n          </div>\r\n          <div>\r\n            {firstName} {lastName}\r\n          </div>\r\n        </div>\r\n        <div className=\"contact-card-data-item contact-card-phone\">\r\n          <div className=\"contact-card-icon-wrapper\">\r\n            <FontAwesomeIcon icon={faPhone} color=\"darkblue\" />\r\n          </div>\r\n          <div>{phone}</div>\r\n        </div>\r\n        <div className=\"contact-card-data-item contact-card-email\">\r\n          <div className=\"contact-card-icon-wrapper\">\r\n            <FontAwesomeIcon icon={faEnvelope} color=\"darkblue\" />\r\n          </div>\r\n          <div>{email}</div>\r\n        </div>\r\n        <div className=\"contact-card-data-item contact-card-category\">\r\n          <div className=\"contact-card-icon-wrapper\">\r\n            <FontAwesomeIcon icon={faSitemap} color=\"darkblue\" />\r\n          </div>\r\n          <div>{category}</div>\r\n        </div>\r\n        <div className=\"contact-card-data-item contact-card-birthday\">\r\n          <div className=\"contact-card-icon-wrapper\">\r\n            <FontAwesomeIcon icon={faBirthdayCake} color=\"darkblue\" />\r\n          </div>\r\n          <div>{birthday && new Date(birthday).toDateString()}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"contact-card-right\">\r\n        <div className=\"contact-card-button-wrapper\">\r\n          <Button type=\"button\" variant=\"warning\" round onClickHandler={onEditButtonClickHandler}>\r\n            <FontAwesomeIcon icon={faEdit} color=\"darkblue\" />\r\n          </Button>\r\n        </div>\r\n        <div className=\"contact-card-button-wrapper\">\r\n          <Button type=\"button\" variant=\"danger\" round onClickHandler={onDeleteButtonClickHandler}>\r\n            <FontAwesomeIcon icon={faTrashAlt} color=\"darkblue\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Backdrop } from 'components/utility';\r\nimport { Modal } from 'components/Modal/Modal';\r\nimport { TextInput } from 'components/TextInput/TextInput';\r\nimport { Button } from 'components/Button/Button';\r\nimport { FormikSelect } from 'components/FormikSelect/FormikSelect';\r\n\r\nimport { selectContactsState, ContactWithId, editContact } from 'store/slices/contactsSlice';\r\nimport './EditContact.css';\r\n\r\ninterface FormValues {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  category: string;\r\n  birthday: Date | null;\r\n}\r\n\r\nconst contactSchema = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .required('First name is required')\r\n    .min(2, 'First name is too short')\r\n    .max(25, 'First name is too long'),\r\n  lastName: Yup.string().min(2, 'Last name is too short').max(25, 'Last name is too long'),\r\n  email: Yup.string().email('Invalid e-mail'),\r\n  phone: Yup.string().required('Phone is required').min(9, 'Phone is too short'),\r\n  category: Yup.string().oneOf(['friends', 'job', 'family', 'other'], 'Invalid category type'),\r\n  birthday: Yup.date().nullable(),\r\n});\r\n\r\ninterface EditContactProps {\r\n  open: boolean;\r\n  onClickHandler: () => void;\r\n  contact: ContactWithId;\r\n}\r\n\r\nexport const EditContact = ({ open, onClickHandler, contact }: EditContactProps) => {\r\n  const { loading, error } = useSelector(selectContactsState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues: FormValues = {\r\n    firstName: contact.firstName,\r\n    lastName: contact.lastName,\r\n    email: contact.email,\r\n    phone: contact.phone,\r\n    category: contact.category,\r\n    birthday: contact.birthday ? new Date(contact.birthday) : null,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Backdrop open={open} onClick={onClickHandler} />\r\n      <Modal title=\"Edit contact\" open={open} feedback={typeof error === 'string' ? error : ''}>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={async (values, actions) => {\r\n            await dispatch(\r\n              editContact(\r\n                contact.id,\r\n                { ...values, birthday: values.birthday ? values.birthday.toISOString() : '' },\r\n                onClickHandler,\r\n              ),\r\n            );\r\n            actions.setSubmitting(false);\r\n            actions.resetForm();\r\n          }}\r\n          validationSchema={contactSchema}\r\n        >\r\n          {({ values, setFieldValue, resetForm }) => (\r\n            <Form>\r\n              <TextInput type=\"text\" name=\"firstName\" placeholder=\"First name *\" />\r\n              <TextInput type=\"text\" name=\"lastName\" placeholder=\"Last name\" />\r\n              <TextInput type=\"email\" name=\"email\" placeholder=\"E-mail\" />\r\n              <TextInput type=\"text\" name=\"phone\" placeholder=\"Phone *\" />\r\n              <FormikSelect name=\"category\" as=\"select\">\r\n                <option value=\"other\">Other</option>\r\n                <option value=\"family\">Family</option>\r\n                <option value=\"job\">Job</option>\r\n                <option value=\"friends\">Friends</option>\r\n              </FormikSelect>\r\n              <div>\r\n                <DatePicker\r\n                  selected={values.birthday}\r\n                  dateFormat=\"MMMM d, yyyy\"\r\n                  className=\"add-contact-birthday\"\r\n                  name=\"birthday\"\r\n                  onChange={(date) => setFieldValue('birthday', date)}\r\n                  placeholderText=\"Birthday\"\r\n                  showYearDropdown\r\n                  isClearable\r\n                />\r\n              </div>\r\n              <div className=\"edit-contact-buttons-wrapper\">\r\n                <div className=\"edit-contact-button-wrapper\">\r\n                  <Button type=\"submit\" variant=\"primary\" stretch disabled={loading}>\r\n                    {loading ? 'Editing...' : 'Edit'}\r\n                  </Button>\r\n                </div>\r\n                <div className=\"edit-contact-button-wrapper\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"secondary\"\r\n                    stretch\r\n                    onClickHandler={() => {\r\n                      onClickHandler();\r\n                      resetForm();\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport { Modal } from 'components/Modal/Modal';\r\nimport { Backdrop } from 'components/utility';\r\nimport { Button } from 'components/Button/Button';\r\n\r\nimport { selectContactsState } from 'store/slices/contactsSlice';\r\nimport './DeleteContact.css';\r\n\r\ninterface DeleteContactProps {\r\n  open: boolean;\r\n  onCancelButtonClickHandler: () => void;\r\n  onDeleteButtonClickHandler: () => void;\r\n}\r\n\r\nexport const DeleteContact = ({ open, onCancelButtonClickHandler, onDeleteButtonClickHandler }: DeleteContactProps) => {\r\n  const { error, loading } = useSelector(selectContactsState);\r\n\r\n  return (\r\n    <>\r\n      <Backdrop open={open} onClick={onCancelButtonClickHandler} />\r\n      <Modal title=\"Delete contact\" open={open} feedback={typeof error === 'string' ? error : ''}>\r\n        <div className=\"delete-contact-buttons\">\r\n          <div className=\"delete-contact-button-wrapper\">\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"danger\"\r\n              onClickHandler={onDeleteButtonClickHandler}\r\n              disabled={loading}\r\n              stretch\r\n            >\r\n              {loading ? 'Deleting...' : 'Delete'}\r\n            </Button>\r\n          </div>\r\n          <div className=\"delete-contact-button-wrapper\">\r\n            <Button type=\"button\" variant=\"secondary\" onClickHandler={onCancelButtonClickHandler} stretch>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { useMemo, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useFirestoreConnect } from 'react-redux-firebase';\r\n\r\nimport { Loader } from 'components/utility';\r\nimport { ContactCard } from 'components/ContactCard/ContactCard';\r\nimport { EditContact } from 'containers/modals/EditContact/EditContact';\r\nimport { DeleteContact } from 'containers/modals/DeleteContact/DeleteContact';\r\n\r\nimport { RootState } from 'store/rootReducer';\r\nimport { ContactWithId, contactsCleanUp, deleteContact } from 'store/slices/contactsSlice';\r\nimport './ContactList.css';\r\n\r\ninterface ContactListProps {\r\n  searchQuery: string;\r\n}\r\n\r\nexport const ContactList = ({ searchQuery }: ContactListProps) => {\r\n  const [contactToEdit, setContactToEdit] = useState<ContactWithId | null>(null);\r\n  const [contactToDelete, setContactToDelete] = useState<ContactWithId | null>(null);\r\n\r\n  const { uid } = useSelector(({ firebase }: RootState) => firebase.auth);\r\n  const contacts: ContactWithId[] = useSelector(({ firestore }: RootState) => firestore.data.contacts?.[uid]?.contacts);\r\n  const requesting = useSelector(({ firestore }: RootState) => firestore.status.requesting[`contacts/${uid}`]);\r\n  const requested = useSelector(({ firestore }: RootState) => firestore.status.requested[`contacts/${uid}`]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useFirestoreConnect(() => [`contacts/${uid}`]);\r\n\r\n  let content;\r\n\r\n  if (requesting) {\r\n    content = <Loader />;\r\n  } else if (requested && !contacts?.length) {\r\n    content = <p className=\"contact-list-text\">Add your first contact</p>;\r\n  }\r\n\r\n  const visibleContacts = useMemo(() => {\r\n    return contacts\r\n      ?.filter((contact) => {\r\n        const contactFullName = `${contact.firstName}${contact.lastName ? contact.lastName : ''}`;\r\n        return contactFullName.toLocaleLowerCase().includes(searchQuery.toLocaleLowerCase());\r\n      })\r\n      .sort((contA, contB) => {\r\n        const contAFullName = `${contA.firstName}${contA.lastName ? contA.lastName : ''}`;\r\n        const contBFullName = `${contB.firstName}${contB.lastName ? contB.lastName : ''}`;\r\n        return contAFullName.localeCompare(contBFullName);\r\n      });\r\n  }, [contacts, searchQuery]);\r\n\r\n  return (\r\n    <>\r\n      {content}\r\n      {visibleContacts?.map((contact) => (\r\n        <div className=\"contact-list-card-wrapper\" key={contact.id}>\r\n          <ContactCard\r\n            {...contact}\r\n            onEditButtonClickHandler={() => setContactToEdit(contact)}\r\n            onDeleteButtonClickHandler={() => setContactToDelete(contact)}\r\n          />\r\n        </div>\r\n      ))}\r\n\r\n      {contactToEdit && (\r\n        <EditContact\r\n          open={Boolean(contactToEdit)}\r\n          onClickHandler={() => setContactToEdit(null)}\r\n          contact={contactToEdit}\r\n        />\r\n      )}\r\n\r\n      {contactToDelete && (\r\n        <DeleteContact\r\n          open={Boolean(contactToDelete)}\r\n          onCancelButtonClickHandler={() => {\r\n            setContactToDelete(null);\r\n            dispatch(contactsCleanUp());\r\n          }}\r\n          onDeleteButtonClickHandler={() => {\r\n            dispatch(deleteContact(contactToDelete, () => setContactToDelete(null)));\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useCallback, useState } from 'react';\r\nimport debounce from 'lodash/debounce';\r\n\r\nimport { ContactsControls } from 'containers/contacts/ContactsControls/ContactsControls';\r\nimport { ContactList } from 'containers/contacts/ContactList/ContactList';\r\n\r\nimport './Contacts.css';\r\n\r\nexport const Contacts = () => {\r\n  const [nameFilter, setNameFilter] = useState('');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const setSearchQueryWithDebounce = useCallback(\r\n    debounce((value: string): void => setSearchQuery(value), 1000),\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <div className=\"contacts\">\r\n      <div className=\"contacts-wrapper\">\r\n        <ContactsControls\r\n          value={nameFilter}\r\n          onNameFilterChangeHandler={({ target }) => {\r\n            setNameFilter((target as HTMLInputElement).value);\r\n            setSearchQueryWithDebounce((target as HTMLInputElement).value);\r\n          }}\r\n        />\r\n        <ContactList searchQuery={searchQuery} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Modal } from 'components/Modal/Modal';\r\nimport { Backdrop } from 'components/utility';\r\nimport { Button } from 'components/Button/Button';\r\n\r\nimport { deleteAccount, selectAuthState } from 'store/slices/authSlice';\r\nimport './DeleteAccount.css';\r\n\r\ninterface DeleteAccountProps {\r\n  open: boolean;\r\n  onClickHandler: () => void;\r\n}\r\n\r\nexport const DeleteAccount = ({ open, onClickHandler }: DeleteAccountProps) => {\r\n  const { deleteProfileError, loading } = useSelector(selectAuthState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Backdrop open={open} onClick={onClickHandler} />\r\n      <Modal\r\n        title=\"Delete account\"\r\n        open={open}\r\n        feedback={typeof deleteProfileError === 'string' ? deleteProfileError : ''}\r\n      >\r\n        <div className=\"delete-account-buttons\">\r\n          <div className=\"delete-account-button-wrapper\">\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"danger\"\r\n              onClickHandler={() => dispatch(deleteAccount())}\r\n              disabled={loading}\r\n              stretch\r\n            >\r\n              Delete\r\n            </Button>\r\n          </div>\r\n          <div className=\"delete-account-button-wrapper\">\r\n            <Button type=\"button\" variant=\"secondary\" onClickHandler={onClickHandler} stretch>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { FormContainer } from 'components/utility';\r\nimport { TextInput } from 'components/TextInput/TextInput';\r\nimport { Button } from 'components/Button/Button';\r\nimport { DeleteAccount } from 'containers/modals/DeleteAccount/DeleteAccount';\r\n\r\nimport { selectAuthState, editProfile, cleanUp } from 'store/slices/authSlice';\r\nimport { RootState } from 'store/rootReducer';\r\nimport './ProfileForm.css';\r\n\r\ninterface FormValues {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string | '';\r\n  confirmPassword: string | '';\r\n}\r\n\r\nconst profileSchema = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .required('First name is required')\r\n    .min(2, 'First name is too short')\r\n    .max(25, 'First name is too long'),\r\n  lastName: Yup.string()\r\n    .required('Last name is required')\r\n    .min(2, 'Last name is too short')\r\n    .max(25, 'Last name is too long'),\r\n  email: Yup.string().email('Invalid e-mail').required('E-mail is required'),\r\n  password: Yup.string().min(8, 'Password is too short'),\r\n  confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password does not match'),\r\n});\r\n\r\nexport const ProfileForm = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  const {\r\n    profile: { firstName, lastName, isLoaded },\r\n    auth: { email },\r\n  } = useSelector(({ firebase }: RootState) => firebase);\r\n  const { error, loading, editProfileSuccess } = useSelector(selectAuthState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues: FormValues = { firstName, lastName, email: email || '', password: '', confirmPassword: '' };\r\n\r\n  if (!isLoaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <FormContainer\r\n        title=\"Edit Profile\"\r\n        error={typeof error === 'string' ? error : ''}\r\n        success={editProfileSuccess ? 'Profile was successfully updated' : ''}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={async (values, actions) => {\r\n            await dispatch(editProfile(values));\r\n            actions.setSubmitting(false);\r\n          }}\r\n          validationSchema={profileSchema}\r\n        >\r\n          <Form>\r\n            <TextInput type=\"text\" name=\"firstName\" placeholder=\"First name\" />\r\n            <TextInput type=\"text\" name=\"lastName\" placeholder=\"Last name\" />\r\n            <TextInput type=\"email\" name=\"email\" placeholder=\"E-mail\" />\r\n            <TextInput type=\"password\" name=\"password\" placeholder=\"Password\" />\r\n            <TextInput type=\"password\" name=\"confirmPassword\" placeholder=\"Confirm password\" />\r\n            <div className=\"profile-form-buttons-wrapper\">\r\n              <div className=\"profile-form-button-wrapper\">\r\n                <Button type=\"submit\" variant=\"primary\" stretch disabled={loading}>\r\n                  {loading ? 'Editing profile...' : 'Edit profile'}\r\n                </Button>\r\n              </div>\r\n              <div className=\"profile-form-button-wrapper\">\r\n                <Button type=\"button\" variant=\"danger\" stretch onClickHandler={() => setModalOpen(true)}>\r\n                  Delete account\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Form>\r\n        </Formik>\r\n      </FormContainer>\r\n\r\n      <DeleteAccount\r\n        open={modalOpen}\r\n        onClickHandler={() => {\r\n          setModalOpen(false);\r\n          dispatch(cleanUp());\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { ProfileForm } from 'containers/forms/ProfileForm/ProfileForm';\r\n\r\nimport { useAuthCleanUp } from 'customHooks/useAuthCleanUp';\r\nimport './Profile.css';\r\n\r\nexport const Profile = () => {\r\n  useAuthCleanUp();\r\n\r\n  return (\r\n    <div className=\"profile-wrapper\">\r\n      <ProfileForm />\r\n    </div>\r\n  );\r\n};\r\n","import { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { FormContainer } from 'components/utility';\r\nimport { TextInput } from 'components/TextInput/TextInput';\r\nimport { Button } from 'components/Button/Button';\r\n\r\nimport { selectAuthState, signIn } from 'store/slices/authSlice';\r\nimport './SignInForm.css';\r\n\r\ninterface FormValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst signInSchema = Yup.object().shape({\r\n  email: Yup.string().email('Invalid e-mail').required('E-mail is required'),\r\n  password: Yup.string().required('Password is required').min(8, 'Password is too short'),\r\n});\r\n\r\nexport const SignInForm = () => {\r\n  const { loading, error } = useSelector(selectAuthState);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues: FormValues = { email: '', password: '' };\r\n\r\n  return (\r\n    <FormContainer title=\"Signin\" error={typeof error === 'string' ? error : ''}>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={async (values, actions) => {\r\n          await dispatch(signIn(values));\r\n          actions.setSubmitting(false);\r\n        }}\r\n        validationSchema={signInSchema}\r\n      >\r\n        <Form>\r\n          <TextInput type=\"email\" name=\"email\" placeholder=\"E-mail *\" />\r\n          <TextInput type=\"password\" name=\"password\" placeholder=\"Password *\" />\r\n          <div className=\"signin-form-button-wrapper\">\r\n            <Button type=\"submit\" variant=\"primary\" stretch disabled={loading}>\r\n              {loading ? 'Signing In...' : 'Sign In'}\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </FormContainer>\r\n  );\r\n};\r\n","import { SignInForm } from 'containers/forms/SignInForm/SignInForm';\r\n\r\nimport { useAuthCleanUp } from 'customHooks/useAuthCleanUp';\r\nimport './SignIn.css';\r\n\r\nexport const SignIn = () => {\r\n  useAuthCleanUp();\r\n\r\n  return (\r\n    <div className=\"signin-wrapper\">\r\n      <SignInForm />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { signOut } from 'store/slices/authSlice';\r\n\r\nexport const SignOut = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(signOut());\r\n  }, [dispatch]);\r\n\r\n  return null;\r\n};\r\n","import { Route, Switch, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { isLoaded } from 'react-redux-firebase';\n\nimport { SignUp } from 'pages/auth/SignUp/SignUp';\nimport { AppContainer } from 'containers/layout/AppContainer/AppContainer';\nimport { VerifyEmail } from 'pages/auth/VerifyEmail/VerifyEmail';\nimport { Contacts } from 'pages/contacts/Contacts/Contacts';\nimport { Profile } from 'pages/auth/Profile/Profile';\nimport { SignIn } from 'pages/auth/SignIn/SignIn';\nimport { SignOut } from 'pages/auth/SignOut/SignOut';\nimport { Loader } from 'components/utility';\n\nimport { ROUTES } from 'constants/routes';\nimport { RootState } from 'store/rootReducer';\n\nexport const App = () => {\n  const { auth } = useSelector(({ firebase }: RootState) => firebase);\n  const { uid, emailVerified } = auth;\n\n  if (!isLoaded(auth)) {\n    return <Loader />;\n  }\n\n  let routes;\n\n  if (uid && !emailVerified) {\n    routes = (\n      <Switch>\n        <Route path={ROUTES.VERIFY_EMAIL} exact component={VerifyEmail} />\n        <Route path={ROUTES.PROFILE} exact component={Profile} />\n        <Route path={ROUTES.SIGNOUT} exact component={SignOut} />\n        <Redirect to={ROUTES.VERIFY_EMAIL} />\n      </Switch>\n    );\n  } else if (uid && emailVerified) {\n    routes = (\n      <Switch>\n        <Route path={ROUTES.CONTACTS} exact component={Contacts} />\n        <Route path={ROUTES.PROFILE} exact component={Profile} />\n        <Route path={ROUTES.SIGNOUT} exact component={SignOut} />\n        <Redirect to={ROUTES.CONTACTS} />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path={ROUTES.SIGNIN} exact component={SignIn} />\n        <Route path={ROUTES.SIGNUP} exact component={SignUp} />\n        <Redirect to={ROUTES.SIGNIN} />\n      </Switch>\n    );\n  }\n\n  return <AppContainer>{routes}</AppContainer>;\n};\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\nimport { firestoreReducer } from 'redux-firestore';\r\n\r\nimport authReducer from 'store/slices/authSlice';\r\nimport contactsReducer from 'store/slices/contactsSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  firebase: firebaseReducer,\r\n  firestore: firestoreReducer,\r\n  contacts: contactsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore, Action, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { getFirebase, actionTypes as rrfActionTypes } from 'react-redux-firebase';\r\nimport { constants as rfConstants, getFirestore, createFirestoreInstance } from 'redux-firestore';\r\n\r\nimport rootReducer, { RootState } from 'store/rootReducer';\r\nimport firebase from '../firebase';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [\r\n        // just ignore every redux-firebase and react-redux-firebase action type\r\n        ...Object.keys(rfConstants.actionTypes).map((type) => `${rfConstants.actionsPrefix}/${type}`),\r\n        ...Object.keys(rrfActionTypes).map((type) => `@@reactReduxFirebase/${type}`),\r\n      ],\r\n      ignoredPaths: ['firebase', 'firestore'],\r\n    },\r\n    thunk: {\r\n      extraArgument: { getFirebase, getFirestore },\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n});\r\n\r\n// react-redux-firebase config\r\nconst rrfConfig = {\r\n  userProfile: 'users',\r\n  useFirestoreForProfile: true,\r\n  attachAuthIsReady: true,\r\n};\r\n\r\nconst rrfProps = {\r\n  firebase,\r\n  config: rrfConfig,\r\n  dispatch: store.dispatch,\r\n  createFirestoreInstance,\r\n};\r\n\r\nexport { rrfProps };\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport type AppThunk = ThunkAction<void, RootState, { getFirebase: any; getFirestore: any }, Action<string>>;\r\n\r\nexport default store;\r\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nimport store, { rrfProps } from 'store/store';\nimport './index.css';\n\nrender(\n  <StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <ReactReduxFirebaseProvider {...rrfProps}>\n          <App />\n        </ReactReduxFirebaseProvider>\n      </HashRouter>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}